generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  user
}

model User {
  id          Int          @id @default(autoincrement())
  name        String
  email       String       @unique
  username    String       @unique
  password    String
  role        Role         @default(user)
  address     Address?
  tasks       Task[]
  teamMembers TeamMember[]

  reportedTasks Task[] @relation("TaskReporter")
  assignedTasks Task[] @relation("TaskAssignee")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id           Int    @id @default(autoincrement())
  street       String
  city         String
  state        String
  zipCode      String
  neighborhood String
  number       Int
  userId       Int    @unique
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id         Int          @id @default(autoincrement())
  name       String
  members    TeamMember[]
  workspaces Workspace[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TeamMember {
  id     Int  @id @default(autoincrement())
  userId Int
  teamId Int
  user   User @relation(fields: [userId], references: [id])
  team   Team @relation(fields: [teamId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([teamId, userId])
  @@index([userId])
}

model Workspace {
  id          Int             @id @default(autoincrement())
  name        String
  methodology String
  steps       WorkspaceStep[]
  sprints     Sprint[]
  teamId      Int
  team        Team            @relation(fields: [teamId], references: [id])

  key         String @unique @db.VarChar(5)
  nextTaskSeq Int    @default(1)
  nextEpicSeq Int    @default(1)

  epics Epic[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Task      Task[]
}

model WorkspaceStep {
  id          Int       @id @default(autoincrement())
  order       Int
  workspaceId Int
  stepId      Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  step        Step      @relation(fields: [stepId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([workspaceId, stepId])
  @@unique([workspaceId, order])
  @@index([workspaceId])
  @@index([stepId])
}

model Step {
  id             Int             @id @default(autoincrement())
  name           String
  workspaceSteps WorkspaceStep[]
  tasks          Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sprint {
  id          Int       @id @default(autoincrement())
  name        String
  startDate   DateTime?
  endDate     DateTime?
  isActive    Boolean   @default(false)
  workspaceId Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  tasks       Task[]

  activatedAt DateTime?
  closedAt    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId, isActive])
}

model Task {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  status      String
  userId      Int
  sprintId    Int?
  stepId      Int
  priorityId  Int
  typeTaskId  Int
  reporterId  Int
  assigneeId  Int?
  startDate   DateTime?
  deadline    DateTime?
  estimate    String?
  idTask      String

  workspaceId Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  epicId Int?
  epic   Epic? @relation(fields: [epicId], references: [id], onDelete: SetNull)

  user     User     @relation(fields: [userId], references: [id])
  reporter User     @relation("TaskReporter", fields: [reporterId], references: [id])
  assignee User?    @relation("TaskAssignee", fields: [assigneeId], references: [id])
  sprint   Sprint?  @relation(fields: [sprintId], references: [id])
  step     Step     @relation(fields: [stepId], references: [id])
  priority Priority @relation(fields: [priorityId], references: [id])
  typeTask TypeTask @relation(fields: [typeTaskId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([stepId])
  @@index([sprintId])
  @@index([priorityId])
  @@index([typeTaskId])
  @@index([reporterId])
  @@index([assigneeId])
  @@index([workspaceId])
  @@index([epicId])
}

model Epic {
  id          Int       @id @default(autoincrement())
  key         String    @unique
  title       String
  description String?
  status      String    @default("open")
  startDate   DateTime?
  targetDate  DateTime?

  priorityId Int?
  priority   Priority? @relation(fields: [priorityId], references: [id])

  workspaceId Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  tasks Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId, status])
}

model Priority {
  id      Int     @id @default(autoincrement())
  label   String
  name    String
  deleted Boolean @default(false)
  tasks   Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Epic      Epic[]
}

model TypeTask {
  id    Int    @id @default(autoincrement())
  name  String
  tasks Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
